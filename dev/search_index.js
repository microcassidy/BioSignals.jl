var documenterSearchIndex = {"docs":
[{"location":"library/function_index/#main-index","page":"Function index","title":"Index","text":"","category":"section"},{"location":"library/function_index/","page":"Function index","title":"Function index","text":"Pages = [\"public.md\", \"internals.md\", \"function_index.md\"]","category":"page"},{"location":"library/outline/#Library-Outline","page":"Contents","title":"Library Outline","text":"","category":"section"},{"location":"library/outline/","page":"Contents","title":"Contents","text":"Pages = [\"public.md\", \"internals.md\", \"function_index.md\"]","category":"page"},{"location":"library/internals/#Private-types-and-functions","page":"Private","title":"Private types and functions","text":"","category":"section"},{"location":"library/internals/","page":"Private","title":"Private","text":"Documentation for WaveformDB.jl's internal interface.","category":"page"},{"location":"library/internals/#WaveformDB","page":"Private","title":"WaveformDB","text":"","category":"section"},{"location":"library/internals/#Header","page":"Private","title":"Header","text":"","category":"section"},{"location":"library/internals/#WaveformDB.Header","page":"Private","title":"WaveformDB.Header","text":"struct Header\n\nrecordname::String - A string of characters that identify the record. The record name numberof_segments::Union{Nothing,UInt32}\n\nIf the field is present, it indicates that the record is a  multi-segment record containing the specified number of segments, and that the header file contains segment specification lines rather than signal specification lines.\n\nnumberofsignals::UInt32 - the number of signals samplingfrequency::Float32 units samples/second/signal counterfrequency::Float32 basecountervalue::Float32 samplespersignal::Union{Nothing,UInt32} basetime::Union{Nothing,Time} basedate::Union{Nothing,Date} parentdir::String signal_specs::Vector{SignalSpecLine}\n\nExample header (100.hea in sample-data directory of repo) ––––-START OF FILE–––––-\n\nunnecessary comment\n\n100 2 360 650000                         <–-all records up to signal_specs 100.dat 212 200 11 1024 995 -22131 0 MLII\n\n100.dat 212 200 11 1024 1011 20052 0 V5\n\n69 M 1085 1629 x1\n\nAldomet, Inderal\n\n––––-END OF FILE––––––-\n\n\n\n\n\n","category":"type"},{"location":"library/internals/#WaveformDB.signalspecline-Tuple{WaveformDB.Header}","page":"Private","title":"WaveformDB.signalspecline","text":"signalspecline(h::Header)\n\na getter method for the signalspecline field in the header\n\n\n\n\n\n","category":"method"},{"location":"library/internals/#Interface","page":"Private","title":"Interface","text":"","category":"section"},{"location":"library/internals/#WaveformDB.read_binary","page":"Private","title":"WaveformDB.read_binary","text":"read_binary(io::IO, header::Header, ::WfdbFormat{<:AbstractStorargeFormat})\n\nreads a WaveformDB sample file io - IOBuffer for the file (\"eg 100.dat\") header - header struct containing the information necessary to decode the file F - the format that the file is in\n\n\n\n\n\n","category":"function"},{"location":"library/internals/#WaveformDB.write_binary","page":"Private","title":"WaveformDB.write_binary","text":"function write_binary(io::IO, header::Header, samples::Vector{Int32}, ::WfdbFormat{<:AbstractStorageFormat})\n\nreads a WaveformDB sample file io - IOBuffer to write to header - header struct containing the information necessary to encode the file F - the WaveformDB format to encode the output as\n\n\n\n\n\n","category":"function"},{"location":"library/internals/#WaveformDB.wsignal-Tuple{WaveformDB.Header, Vector{Int32}}","page":"Private","title":"WaveformDB.wsignal","text":"wsignal(header::Header, signal::Vector{Int32})\n\nwrites a signal file to disk. All of the information required to write the file needs to be specified by the header\n\n\n\n\n\n","category":"method"},{"location":"library/internals/#Readers","page":"Private","title":"Readers","text":"","category":"section"},{"location":"library/internals/#Writers","page":"Private","title":"Writers","text":"","category":"section"},{"location":"library/internals/#Utils","page":"Private","title":"Utils","text":"","category":"section"},{"location":"#WaveformDB.jl-Documentation","page":"Home","title":"WaveformDB.jl Documentation","text":"","category":"section"},{"location":"#Overview","page":"Home","title":"Overview","text":"","category":"section"},{"location":"#Examples","page":"Home","title":"Examples","text":"","category":"section"},{"location":"#Developers","page":"Home","title":"Developers","text":"","category":"section"},{"location":"#Cite","page":"Home","title":"Cite","text":"","category":"section"},{"location":"library/public/#Private-Documentation","page":"Public","title":"Private Documentation","text":"","category":"section"},{"location":"library/public/","page":"Public","title":"Public","text":"Documentation for WaveformDB.jl's public interface.","category":"page"},{"location":"library/public/","page":"Public","title":"Public","text":"See the Internals section of the manual for internal package docs covering all submodules.","category":"page"},{"location":"library/public/#WaveformDB","page":"Public","title":"WaveformDB","text":"","category":"section"},{"location":"library/public/#WaveformDB.WaveformDB","page":"Public","title":"WaveformDB.WaveformDB","text":"Main module for WaveformDB.jl – is a A Julia-native package for reading, writing, processing, and plotting physiologic signal and annotation data. The core I/O functionality is based on the Waveform Database (WFDB) specifications..\n\nThis package is heavily inspired by the original WFDB Software Package, and initially aimed to replicate many of its command-line APIs. However, the projects are independent, and there is no promise of consistency between the two, beyond each package adhering to the core specifications.\n\nWaveformDB.jl can be used to read an ECG signal e.g.:\n\njulia> using WaveformDB\n\njulia> rdrecord(\"foo.hea\")\n\n\nExports:\n\n\n\n\n\n","category":"module"},{"location":"library/public/#Header","page":"Public","title":"Header","text":"","category":"section"},{"location":"library/public/#WaveformDB.adc_gain-Tuple{WaveformDB.SignalSpecLine}","page":"Public","title":"WaveformDB.adc_gain","text":"adc_gain(s::SignalSpecLine)\n\na getter method for the adc_gain field in the header. can either be used on:\n\nHeader\nSignalSpecLine\nVector{SignalSpecLine}\n\n\n\n\n\n","category":"method"},{"location":"library/public/#WaveformDB.adc_resolution-Tuple{WaveformDB.SignalSpecLine}","page":"Public","title":"WaveformDB.adc_resolution","text":"adc_resolution(s::SignalSpecLine)\n\na getter method for the adc_resolution field in the header. can either be used on:\n\nHeader\nSignalSpecLine\nVector{SignalSpecLine}\n\n\n\n\n\n","category":"method"},{"location":"library/public/#WaveformDB.adc_zero-Tuple{WaveformDB.SignalSpecLine}","page":"Public","title":"WaveformDB.adc_zero","text":"adc_zero(s::SignalSpecLine)\n\na getter method for the adc_zero field in the header. can either be used on:\n\nHeader\nSignalSpecLine\nVector{SignalSpecLine}\n\n\n\n\n\n","category":"method"},{"location":"library/public/#WaveformDB.base_counter_value-Tuple{WaveformDB.Header}","page":"Public","title":"WaveformDB.base_counter_value","text":"base_counter_value(h::Header)\n\na getter method for the basecountervalue field in the header\n\n\n\n\n\n","category":"method"},{"location":"library/public/#WaveformDB.base_date-Tuple{WaveformDB.Header}","page":"Public","title":"WaveformDB.base_date","text":"base_date(h::Header)\n\na getter method for the base_date field in the header\n\n\n\n\n\n","category":"method"},{"location":"library/public/#WaveformDB.base_time-Tuple{WaveformDB.Header}","page":"Public","title":"WaveformDB.base_time","text":"base_time(h::Header)\n\na getter method for the base_time field in the header\n\n\n\n\n\n","category":"method"},{"location":"library/public/#WaveformDB.baseline-Tuple{WaveformDB.SignalSpecLine}","page":"Public","title":"WaveformDB.baseline","text":"baseline(s::SignalSpecLine)\n\na getter method for the baseline field in the header. can either be used on:\n\nHeader\nSignalSpecLine\nVector{SignalSpecLine}\n\n\n\n\n\n","category":"method"},{"location":"library/public/#WaveformDB.block_size-Tuple{WaveformDB.SignalSpecLine}","page":"Public","title":"WaveformDB.block_size","text":"block_size(s::SignalSpecLine)\n\na getter method for the block_size field in the header. can either be used on:\n\nHeader\nSignalSpecLine\nVector{SignalSpecLine}\n\n\n\n\n\n","category":"method"},{"location":"library/public/#WaveformDB.byte_offset-Tuple{WaveformDB.SignalSpecLine}","page":"Public","title":"WaveformDB.byte_offset","text":"byte_offset(s::SignalSpecLine)\n\na getter method for the byte_offset field in the header. can either be used on:\n\nHeader\nSignalSpecLine\nVector{SignalSpecLine}\n\n\n\n\n\n","category":"method"},{"location":"library/public/#WaveformDB.checksum","page":"Public","title":"WaveformDB.checksum","text":"checksum(h::Header) # retrieves the checksums from a header file\nchecksum(h::Header,signal)  # *calculates* the checksum of a decoded symbol\n\n\n\n\n\n","category":"function"},{"location":"library/public/#WaveformDB.checksum-Tuple{WaveformDB.SignalSpecLine}","page":"Public","title":"WaveformDB.checksum","text":"checksum(s::SignalSpecLine)\n\na getter method for the checksum field in the header. can either be used on:\n\nHeader\nSignalSpecLine\nVector{SignalSpecLine}\n\n\n\n\n\n","category":"method"},{"location":"library/public/#WaveformDB.counter_frequency-Tuple{WaveformDB.Header}","page":"Public","title":"WaveformDB.counter_frequency","text":"counter_frequency(h::Header)\n\na getter method for the counter_frequency field in the header\n\n\n\n\n\n","category":"method"},{"location":"library/public/#WaveformDB.description-Tuple{WaveformDB.SignalSpecLine}","page":"Public","title":"WaveformDB.description","text":"description(s::SignalSpecLine)\n\na getter method for the description field in the header. can either be used on:\n\nHeader\nSignalSpecLine\nVector{SignalSpecLine}\n\n\n\n\n\n","category":"method"},{"location":"library/public/#WaveformDB.filename-Tuple{WaveformDB.SignalSpecLine}","page":"Public","title":"WaveformDB.filename","text":"filename(s::SignalSpecLine)\n\na getter method for the filename field in the header. can either be used on:\n\nHeader\nSignalSpecLine\nVector{SignalSpecLine}\n\n\n\n\n\n","category":"method"},{"location":"library/public/#WaveformDB.format-Tuple{WaveformDB.SignalSpecLine}","page":"Public","title":"WaveformDB.format","text":"format(s::SignalSpecLine)\n\na getter method for the format field in the header. can either be used on:\n\nHeader\nSignalSpecLine\nVector{SignalSpecLine}\n\n\n\n\n\n","category":"method"},{"location":"library/public/#WaveformDB.initial_value-Tuple{WaveformDB.SignalSpecLine}","page":"Public","title":"WaveformDB.initial_value","text":"initial_value(s::SignalSpecLine)\n\na getter method for the initial_value field in the header. can either be used on:\n\nHeader\nSignalSpecLine\nVector{SignalSpecLine}\n\n\n\n\n\n","category":"method"},{"location":"library/public/#WaveformDB.nsignals-Tuple{WaveformDB.Header}","page":"Public","title":"WaveformDB.nsignals","text":"nsignals(h::Header)\n\nnumber of signal specs present in a header\n\n\n\n\n\n","category":"method"},{"location":"library/public/#WaveformDB.number_of_segments-Tuple{WaveformDB.Header}","page":"Public","title":"WaveformDB.number_of_segments","text":"number_of_segments(h::Header)\n\na getter method for the numberofsegments field in the header\n\n\n\n\n\n","category":"method"},{"location":"library/public/#WaveformDB.number_of_signals-Tuple{WaveformDB.Header}","page":"Public","title":"WaveformDB.number_of_signals","text":"number_of_signals(h::Header)\n\na getter method for the numberofsignals field in the header\n\n\n\n\n\n","category":"method"},{"location":"library/public/#WaveformDB.parentdir-Tuple{WaveformDB.Header}","page":"Public","title":"WaveformDB.parentdir","text":"parentdir(h::Header)\n\na getter method for the parentdir field in the header\n\n\n\n\n\n","category":"method"},{"location":"library/public/#WaveformDB.record_name-Tuple{WaveformDB.Header}","page":"Public","title":"WaveformDB.record_name","text":"record_name(h::Header)\n\na getter method for the record_name field in the header\n\n\n\n\n\n","category":"method"},{"location":"library/public/#WaveformDB.samples_per_frame-Tuple{WaveformDB.SignalSpecLine}","page":"Public","title":"WaveformDB.samples_per_frame","text":"samples_per_frame(s::SignalSpecLine)\n\na getter method for the samplesperframe field in the header. can either be used on:\n\nHeader\nSignalSpecLine\nVector{SignalSpecLine}\n\n\n\n\n\n","category":"method"},{"location":"library/public/#WaveformDB.samples_per_signal-Tuple{WaveformDB.Header}","page":"Public","title":"WaveformDB.samples_per_signal","text":"samples_per_signal(h::Header)\n\na getter method for the samplespersignal field in the header\n\n\n\n\n\n","category":"method"},{"location":"library/public/#WaveformDB.sampling_frequency-Tuple{WaveformDB.Header}","page":"Public","title":"WaveformDB.sampling_frequency","text":"sampling_frequency(h::Header)\n\na getter method for the sampling_frequency field in the header\n\n\n\n\n\n","category":"method"},{"location":"library/public/#WaveformDB.skew-Tuple{WaveformDB.SignalSpecLine}","page":"Public","title":"WaveformDB.skew","text":"skew(s::SignalSpecLine)\n\na getter method for the skew field in the header. can either be used on:\n\nHeader\nSignalSpecLine\nVector{SignalSpecLine}\n\n\n\n\n\n","category":"method"},{"location":"library/public/#WaveformDB.units-Tuple{WaveformDB.SignalSpecLine}","page":"Public","title":"WaveformDB.units","text":"units(s::SignalSpecLine)\n\na getter method for the units field in the header. can either be used on:\n\nHeader\nSignalSpecLine\nVector{SignalSpecLine}\n\n\n\n\n\n","category":"method"},{"location":"library/public/#Interface","page":"Public","title":"Interface","text":"","category":"section"},{"location":"library/public/#WaveformDB.rdsignal-Tuple{WaveformDB.Header}","page":"Public","title":"WaveformDB.rdsignal","text":"rdsignal(h::Header,physical::Bool = true)::Tuple{Int64, Matrix{Int32}}\n\nread the samples described in the header's signal_specs field. Header - a parsed header (.hea) file\n\nphysical - optional (defaults to true)         Specifies whether to return signals in physical units in the         p_signal field (True), or digital units in the d_signal         field (False).\n\n\n\n\n\n","category":"method"},{"location":"library/public/#Readers","page":"Public","title":"Readers","text":"","category":"section"},{"location":"library/public/#Writers","page":"Public","title":"Writers","text":"","category":"section"},{"location":"library/public/#utils","page":"Public","title":"utils","text":"","category":"section"}]
}
